diff --git a/src/os.c b/src/os.c
index 8541523..36ce3b7 100644
--- a/src/os.c
+++ b/src/os.c
@@ -31,6 +31,9 @@ terms of the MIT license. A copy of the license can be found in the file
 #include <windows.h>
 #elif defined(__wasi__)
 // stdlib.h is all we need, and has already been included in mimalloc.h
+#elif defined(__SWITCH__)
+#include <malloc.h> // on switch, just use default malloc for now
+#include <unistd.h>    // sysconf
 #else
 #include <sys/mman.h>  // mmap
 #include <unistd.h>    // sysconf
@@ -238,6 +241,8 @@ static bool mi_os_mem_free(void* addr, size_t size, bool was_committed, mi_stats
   err = (VirtualFree(addr, 0, MEM_RELEASE) == 0);
 #elif defined(__wasi__)
   err = 0; // WebAssembly's heap cannot be shrunk
+#elif defined(__SWITCH__)
+  free(addr);
 #else
   err = (munmap(addr, size) == -1);
 #endif
@@ -331,6 +336,8 @@ static void* mi_wasm_heap_grow(size_t size, size_t try_alignment) {
   }
   return (void*)aligned_base;
 }
+#elif defined(__SWITCH__)
+// Don't need anything here yet
 #else
 #define MI_OS_USE_MMAP
 static void* mi_unix_mmapx(void* addr, size_t size, size_t try_alignment, int protect_flags, int flags, int fd) {
@@ -539,6 +546,8 @@ static void* mi_os_mem_alloc(size_t size, size_t try_alignment, bool commit, boo
   #elif defined(__wasi__)
     *is_large = false;
     p = mi_wasm_heap_grow(size, try_alignment);
+  #elif defined(__SWITCH__)
+    p = malloc(size);
   #else
     int protect_flags = (commit ? (PROT_WRITE | PROT_READ) : PROT_NONE);
     p = mi_unix_mmap(NULL, size, try_alignment, protect_flags, false, allow_large, is_large);
@@ -734,6 +743,8 @@ static bool mi_os_commitx(void* addr, size_t size, bool commit, bool conservativ
   }
   #elif defined(__wasi__)
   // WebAssembly guests can't control memory protection
+  #elif defined(__SWITCH__)
+  // Switch guests also can't control memory protection (maybe?)
   #elif defined(MAP_FIXED)
   if (!commit) {
     // use mmap with MAP_FIXED to discard the existing memory (and reduce commit charge)
@@ -824,6 +835,8 @@ static bool mi_os_resetx(void* addr, size_t size, bool reset, mi_stats_t* stats)
   }
 #elif defined(__wasi__)
   int err = 0;
+#elif defined(__SWITCH__)
+  int err = 0;
 #else
   int err = madvise(start, csize, MADV_DONTNEED);
 #endif
@@ -882,6 +895,8 @@ static  bool mi_os_protectx(void* addr, size_t size, bool protect) {
   err = (ok ? 0 : GetLastError());
 #elif defined(__wasi__)
   err = 0;
+#elif defined(__SWITCH__)
+  err = 0;
 #else
   err = mprotect(start, csize, protect ? PROT_NONE : (PROT_READ | PROT_WRITE));
   if (err != 0) { err = errno; }
diff --git a/src/stats.c b/src/stats.c
index c94fbde..d5e3b98 100644
--- a/src/stats.c
+++ b/src/stats.c
@@ -503,7 +503,7 @@ static void mi_stat_process_info(mi_msecs_t* elapsed, mi_msecs_t* utime, mi_msec
   getrusage(RUSAGE_SELF, &rusage);
   *utime = timeval_secs(&rusage.ru_utime);
   *stime = timeval_secs(&rusage.ru_stime);
-#if !defined(__HAIKU__)
+#if !defined(__HAIKU__) && !defined(__SWITCH__)
   *page_faults = rusage.ru_majflt;
 #endif
   // estimate commit using our stats
@@ -533,7 +533,7 @@ static void mi_stat_process_info(mi_msecs_t* elapsed, mi_msecs_t* utime, mi_msec
 }
 
 #else
-#ifndef __wasi__
+#ifndef __wasi__ || __SWITCH__
 // WebAssembly instances are not processes
 #pragma message("define a way to get process info")
 #endif
